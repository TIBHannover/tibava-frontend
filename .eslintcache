[{"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\index.js":"1","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\App.js":"2","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\reportWebVitals.js":"3","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\analysisViewer.jsx":"4","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\rectangle.jsx":"5","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\faceAnalysisGraph.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":391,"mtime":1613674907627,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":8048,"mtime":1613961358812,"results":"11","hashOfConfig":"8"},{"size":1414,"mtime":1613949287390,"results":"12","hashOfConfig":"8"},{"size":2420,"mtime":1613950285907,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"5cflir",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\index.js",[],["30","31"],"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\App.js",["32"],"import logo from './logo.svg';\nimport './App.css';\nimport AnalysisViewer from \"./components/analysisViewer\";\n\nfunction App() {\n  return (\n   <div class=\"\">\n      <div class=\"header\">\n        <h2>Audio Video Analysis</h2>\n      </div>\n      <div>\n        <AnalysisViewer/>\n      </div>\n      <div class=\"footer\">\n        <p>Footer Notes</p>\n      </div>\n   </div>\n  );\n}\n\nexport default App;\n","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\reportWebVitals.js",[],"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\analysisViewer.jsx",["33","34","35","36","37","38"],"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\rectangle.jsx",["39"],"import React, { Component } from \"react\";\r\nimport ResizableRect from 'react-resizable-rotatable-draggable'\r\n\r\nclass Rectangle extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          getCurrentFaceBboxesArray: props.getCurrentFaceBboxesArray,\r\n          getFrameIdx: props.getFrameIdx,\r\n          xShift:-200,\r\n          yShift:400\r\n        };\r\n      }\r\n    errorHandler = ({ error }) => this.setState({ error });\r\n    onChangeCallback = (selectedInterval) => this.setState({ selectedInterval });\r\n    render() {\r\n        const ResizableRectList = [];\r\n        console.log(this.state.getCurrentFaceBboxesArray().length);\r\n        console.log(this.state.getFrameIdx());\r\n        var frmIdx = this.state.getFrameIdx();\r\n        var currentBboxxywh = this.state.getCurrentFaceBboxesArray();\r\n        for (var i = 0; i < currentBboxxywh.length; i++) {\r\n            ResizableRectList.push(<ResizableRect\r\n                      top={this.state.xShift+currentBboxxywh[i][0]}\r\n                      left={this.state.yShift+currentBboxxywh[i][1]}\r\n                      width={currentBboxxywh[i][2]}\r\n                      height={currentBboxxywh[i][3]}\r\n                      zoomable='n, w, s, e, nw, ne, se, sw' />)\r\n          };\r\n        return (\r\n            <div>\r\n                {ResizableRectList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rectangle;","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\faceAnalysisGraph.jsx",["40","41","42","43"],"import FileSaver from \"file-saver\";\r\nimport React from \"react\";\r\nimport { useMeasure } from \"react-use\";\r\nimport {\r\n  CartesianGrid,\r\n  Legend,\r\n  Line,\r\n  LineChart,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from \"recharts\";\r\nimport { getPngData } from \"recharts-to-png\";\r\n\r\nexport const FaceAnalysisGraph = (args) => {\r\n\r\n  const [containerRef, { width: containerWidth }] = useMeasure();\r\n  // The chart that we want to download the PNG for.\r\n  const [chart, setChart] = React.useState();\r\n\r\n  const handleDownload = React.useCallback(async () => {\r\n    // Send the chart to getPngData\r\n    const pngData = await getPngData(chart);\r\n    // Use FileSaver to download the PNG\r\n    FileSaver.saveAs(pngData, \"videofaceanalysis.png\");\r\n  }, [chart]);\r\n    const colorschemes = [\"#C49500\",\"#060606\",\"#0F7800\",\"#AF1F00\",\"#7B7878\",\"#C49500\",\"#588A00\",\"#0F7800\",\"#007245\",\"#008F91\",\"#004091\",\"#040091\",\"#420091\",\"#7F0091\",\"#91004B\",\"#910025\",\"#317A9A\"];\r\n\r\n  var data = args.faceAreaArrForGraph;\r\n  function getRandomColor() {\r\n      var letters = '0123456789ABCDEF';\r\n      var color = '#';\r\n      for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n    return color;\r\n    }\r\n    function getMultiLineForGraph(data) {\r\n        var multiLineForGraph = '';\r\n        var allKeys = Object.keys(data[0]);\r\n        for (var i = 1; i < allKeys.length; i++) {\r\n        multiLineForGraph = multiLineForGraph+'<Line type=\"monotone\" dataKey=\"'+allKeys[i]+'\" stroke=\"'+colorschemes[i]+'\"/> '\r\n        }\r\n    };\r\n\r\n  var multiLineForGraph = [];\r\n        var allKeys = Object.keys(data[0]);\r\n        for (var i = 1; i < allKeys.length; i++) {\r\n            multiLineForGraph.push(<Line type=\"monotone\" dataKey={allKeys[i]} stroke={colorschemes[i]} />);\r\n        }\r\n  return (\r\n        <>\r\n          <LineChart\r\n            ref={(ref) => setChart(ref)} // Set target element\r\n            data={data}\r\n            height={300}\r\n            width={700}\r\n          >\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ bottom: -5 }} />\r\n            {multiLineForGraph}\r\n          </LineChart>\r\n          <span style={{ float: 'left' }}>\r\n            <button onClick={handleDownload}>Download</button>\r\n          </span>\r\n        </>\r\n  );\r\n};\r\n\r\nexport default FaceAnalysisGraph;\r\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":7,"column":8,"nodeType":"50","messageId":"51","endLine":7,"endColumn":19},{"ruleId":"53","severity":1,"message":"54","line":72,"column":13,"nodeType":"50","messageId":"55","endLine":72,"endColumn":17},{"ruleId":"53","severity":1,"message":"56","line":79,"column":22,"nodeType":"50","messageId":"55","endLine":79,"endColumn":23},{"ruleId":"48","severity":1,"message":"57","line":95,"column":13,"nodeType":"50","messageId":"51","endLine":95,"endColumn":23},{"ruleId":"58","severity":1,"message":"59","line":154,"column":39,"nodeType":"60","endLine":154,"endColumn":122},{"ruleId":"58","severity":1,"message":"59","line":155,"column":39,"nodeType":"60","endLine":155,"endColumn":122},{"ruleId":"48","severity":1,"message":"61","line":20,"column":13,"nodeType":"50","messageId":"51","endLine":20,"endColumn":19},{"ruleId":"48","severity":1,"message":"62","line":17,"column":10,"nodeType":"50","messageId":"51","endLine":17,"endColumn":22},{"ruleId":"48","severity":1,"message":"63","line":17,"column":33,"nodeType":"50","messageId":"51","endLine":17,"endColumn":47},{"ruleId":"48","severity":1,"message":"64","line":30,"column":12,"nodeType":"50","messageId":"51","endLine":30,"endColumn":26},{"ruleId":"48","severity":1,"message":"65","line":38,"column":14,"nodeType":"50","messageId":"51","endLine":38,"endColumn":34},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'RangeSlider' is defined but never used.","no-redeclare","'data' is already defined.","redeclared","'j' is already defined.","'halFpsJump' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'frmIdx' is assigned a value but never used.","'containerRef' is assigned a value but never used.","'containerWidth' is assigned a value but never used.","'getRandomColor' is defined but never used.","'getMultiLineForGraph' is defined but never used.","no-global-assign","no-unsafe-negation"]