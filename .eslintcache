[{"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\index.js":"1","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\App.js":"2","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\reportWebVitals.js":"3","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\analysisViewer.jsx":"4","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\rectangle.jsx":"5","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\faceAnalysisGraph.jsx":"6","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\index.js":"7","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\reportWebVitals.js":"8","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\App.js":"9","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\analysisViewer.jsx":"10","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\rectangle.jsx":"11","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\faceAnalysisGraph.jsx":"12","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\header.jsx":"13","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\shotBoundaryViewer.jsx":"14","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\annotationForm.jsx":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":391,"mtime":1613674907627,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":8048,"mtime":1613961358812,"results":"20","hashOfConfig":"17"},{"size":1414,"mtime":1613949287390,"results":"21","hashOfConfig":"17"},{"size":2420,"mtime":1613950285907,"results":"22","hashOfConfig":"17"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":645,"mtime":1614695394383,"results":"26","hashOfConfig":"24"},{"size":12669,"mtime":1616412685914,"results":"27","hashOfConfig":"24"},{"size":2554,"mtime":1615398081104,"results":"28","hashOfConfig":"24"},{"size":3005,"mtime":1615766270215,"results":"29","hashOfConfig":"24"},{"size":1184,"mtime":1616412819806,"results":"30","hashOfConfig":"24"},{"size":2604,"mtime":1616412960906,"results":"31","hashOfConfig":"24"},{"size":5073,"mtime":1616161461229,"results":"32","hashOfConfig":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"5cflir",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1vi0446",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"51"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"51"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\index.js",[],["73","74"],"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\App.js",["75"],"import logo from './logo.svg';\nimport './App.css';\nimport AnalysisViewer from \"./components/analysisViewer\";\n\nfunction App() {\n  return (\n   <div class=\"\">\n      <div class=\"header\">\n        <h2>Audio Video Analysis</h2>\n      </div>\n      <div>\n        <AnalysisViewer/>\n      </div>\n      <div class=\"footer\">\n        <p>Footer Notes</p>\n      </div>\n   </div>\n  );\n}\n\nexport default App;\n","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\reportWebVitals.js",[],"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\analysisViewer.jsx",["76","77","78","79","80","81"],"C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\rectangle.jsx",["82"],"import React, { Component } from \"react\";\r\nimport ResizableRect from 'react-resizable-rotatable-draggable'\r\n\r\nclass Rectangle extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          getCurrentFaceBboxesArray: props.getCurrentFaceBboxesArray,\r\n          getFrameIdx: props.getFrameIdx,\r\n          xShift:-200,\r\n          yShift:400\r\n        };\r\n      }\r\n    errorHandler = ({ error }) => this.setState({ error });\r\n    onChangeCallback = (selectedInterval) => this.setState({ selectedInterval });\r\n    render() {\r\n        const ResizableRectList = [];\r\n        console.log(this.state.getCurrentFaceBboxesArray().length);\r\n        console.log(this.state.getFrameIdx());\r\n        var frmIdx = this.state.getFrameIdx();\r\n        var currentBboxxywh = this.state.getCurrentFaceBboxesArray();\r\n        for (var i = 0; i < currentBboxxywh.length; i++) {\r\n            ResizableRectList.push(<ResizableRect\r\n                      top={this.state.xShift+currentBboxxywh[i][0]}\r\n                      left={this.state.yShift+currentBboxxywh[i][1]}\r\n                      width={currentBboxxywh[i][2]}\r\n                      height={currentBboxxywh[i][3]}\r\n                      zoomable='n, w, s, e, nw, ne, se, sw' />)\r\n          };\r\n        return (\r\n            <div>\r\n                {ResizableRectList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rectangle;","C:\\working directory\\projects\\TIBAVA\\tibava\\src\\components\\faceAnalysisGraph.jsx",["83","84","85","86"],"import FileSaver from \"file-saver\";\r\nimport React from \"react\";\r\nimport { useMeasure } from \"react-use\";\r\nimport {\r\n  CartesianGrid,\r\n  Legend,\r\n  Line,\r\n  LineChart,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from \"recharts\";\r\nimport { getPngData } from \"recharts-to-png\";\r\n\r\nexport const FaceAnalysisGraph = (args) => {\r\n\r\n  const [containerRef, { width: containerWidth }] = useMeasure();\r\n  // The chart that we want to download the PNG for.\r\n  const [chart, setChart] = React.useState();\r\n\r\n  const handleDownload = React.useCallback(async () => {\r\n    // Send the chart to getPngData\r\n    const pngData = await getPngData(chart);\r\n    // Use FileSaver to download the PNG\r\n    FileSaver.saveAs(pngData, \"videofaceanalysis.png\");\r\n  }, [chart]);\r\n    const colorschemes = [\"#C49500\",\"#060606\",\"#0F7800\",\"#AF1F00\",\"#7B7878\",\"#C49500\",\"#588A00\",\"#0F7800\",\"#007245\",\"#008F91\",\"#004091\",\"#040091\",\"#420091\",\"#7F0091\",\"#91004B\",\"#910025\",\"#317A9A\"];\r\n\r\n  var data = args.faceAreaArrForGraph;\r\n  function getRandomColor() {\r\n      var letters = '0123456789ABCDEF';\r\n      var color = '#';\r\n      for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n    return color;\r\n    }\r\n    function getMultiLineForGraph(data) {\r\n        var multiLineForGraph = '';\r\n        var allKeys = Object.keys(data[0]);\r\n        for (var i = 1; i < allKeys.length; i++) {\r\n        multiLineForGraph = multiLineForGraph+'<Line type=\"monotone\" dataKey=\"'+allKeys[i]+'\" stroke=\"'+colorschemes[i]+'\"/> '\r\n        }\r\n    };\r\n\r\n  var multiLineForGraph = [];\r\n        var allKeys = Object.keys(data[0]);\r\n        for (var i = 1; i < allKeys.length; i++) {\r\n            multiLineForGraph.push(<Line type=\"monotone\" dataKey={allKeys[i]} stroke={colorschemes[i]} />);\r\n        }\r\n  return (\r\n        <>\r\n          <LineChart\r\n            ref={(ref) => setChart(ref)} // Set target element\r\n            data={data}\r\n            height={300}\r\n            width={700}\r\n          >\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ bottom: -5 }} />\r\n            {multiLineForGraph}\r\n          </LineChart>\r\n          <span style={{ float: 'left' }}>\r\n            <button onClick={handleDownload}>Download</button>\r\n          </span>\r\n        </>\r\n  );\r\n};\r\n\r\nexport default FaceAnalysisGraph;\r\n","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\index.js",[],["87","88"],"C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\reportWebVitals.js",[],"C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\App.js",["89"],"import logo from './logo.svg';\nimport './App.css';\n//import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');\nimport AnalysisViewer from \"./components/analysisViewer\";\nimport Header from \"./components/header\";\n\nfunction App() {\n  return (\n   <div className=\"\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n      <div className=\"header\">\n        <Header/>\n      </div>\n      <div>\n        <AnalysisViewer/>\n      </div>\n      <div className=\"footer\">\n        <p>Footer Notes</p>\n      </div>\n   </div>\n  );\n}\n\nexport default App;\n","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\analysisViewer.jsx",["90","91","92","93","94","95"],"import React, { Component } from \"react\";\r\n//import ReactPlayer from 'react-player'\r\nimport videoSample1 from './../../media/Crash_Course_Engineering_Preview_-_English.mp4';\r\nimport videoSample2 from './../../media/Electronic_Computing__Crash_Course_Computer_Science_2_-_English_csyt.mp4';\r\nimport Rectangle from \"./rectangle\";\r\nimport FaceAnalysisGraph from \"./faceAnalysisGraph\";\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport ShotBoundaryViewer from \"./shotBoundaryViewer\";\r\nimport AnnotationForm from \"./annotationForm\";\r\nclass AnalysisViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          videoBase:\"/static/media/\",\r\n          videoLink:\"Crash_Course_Engineering_Preview_-_English.mp4\",\r\n          data:{fps:25},\r\n          sceneData:{},\r\n          vidId:1,\r\n          frameIdx:0,\r\n          currentTime:0,\r\n          coveredTime:0,\r\n          coveredTimeStartShift:9,\r\n          duration:0,\r\n          faceDetectors:\"display-visible\",\r\n          faceAreaGraph:\"display-visible\",\r\n          shotBoundaries:\"display-visible\",\r\n          currentBoxValues:[[300,500,80,80]],\r\n          faceAreaArr:[{ frameNum: \"0\", f1: 0.40, f2: 0.24},\r\n                        { frameNum: \"15\", f1: 0.30, f2: 0.18 },\r\n                        { frameNum: \"30\", f1: 0.20, f2: 0.90 },\r\n                        { frameNum: \"45\", f1: 0.20, f2: 0.38},\r\n                        { frameNum: \"60\", f1: 0.10, f2: 0.40 },\r\n                        { frameNum: \"75\", f1: 0.20, f2: 0.30},\r\n                        { frameNum: \"90\", f1: 0.39, f2: 0.40 }]\r\n        };\r\n        this.videoDict = {\r\n            1:videoSample1,\r\n            2:videoSample2\r\n            };\r\n        this.videoNames = {\r\n            1:\"Crash_Course_Engineering_Preview_-_English.mp4\",\r\n            2:\"Electronic_Computing__Crash_Course_Computer_Science_2_-_English_csyt.mp4\"\r\n            };\r\n        this.videoShape = {\r\n            1:[1280, 720],\r\n            2:[900, 500] //[640, 360]\r\n            };\r\n        this.onPlayTimeChange = this.onPlayTimeChange.bind(this);\r\n        this.getFaceDetectionResults = this.getFaceDetectionResults.bind(this);\r\n        this.fps = 25 ;\r\n        this.baseFrameWidthHeight = [900, 500] ;\r\n        this.videoFrameRatio = [this.baseFrameWidthHeight[0]/this.videoShape[1][0], this.baseFrameWidthHeight[1]/this.videoShape[1][1]];\r\n        this.curentPlayTime = 0;\r\n        this.video_player = React.createRef();\r\n        this.valSlider = React.createRef();\r\n        this.cbFaceDetectors = React.createRef();\r\n        this.cbFaceAreaGraph = React.createRef();\r\n        this.cbShotBoundaries = React.createRef();\r\n        this.sceneData2 = [];\r\n      }\r\n\r\n    getAllBboxInArray(face_detectionArr){\r\n        var allBboxArr =[];\r\n        for (var i = 0; i < face_detectionArr.length; i++) {\r\n            allBboxArr.push(face_detectionArr[i].bbox_xywh);\r\n        }\r\n        return allBboxArr;\r\n    };\r\n    getFrameIdx= () => {\r\n        return this.state.frameIdx;\r\n    };\r\n    getFrameRate= () => {\r\n        return this.state.data.fps;\r\n    };\r\n    getCoveredTimeValue=()=>{\r\n    return (this.state.currentTime/this.state.duration)*100\r\n    };\r\n    setCheckboxDefault = () => {\r\n        this.cbFaceDetectors.current.checked=true;\r\n        this.cbShotBoundaries.current.checked=true;\r\n        this.cbFaceAreaGraph.current.checked=true;\r\n    };\r\n    onCheckboxChange = (e) => {\r\n        console.log(\"onCheckboxChange: \");\r\n        console.log(e.target.checked);\r\n        if(e.target.value===\"faceDetectors\"){\r\n            e.target.checked? this.setState({faceDetectors:\"display-visible\"}):this.setState({faceDetectors:\"display-hidden\"});\r\n        }\r\n        else if(e.target.value===\"faceAreaGraph\"){\r\n            e.target.checked? this.setState({faceAreaGraph:\"display-visible\"}):this.setState({faceAreaGraph:\"display-hidden\"});\r\n        }\r\n        else if(e.target.value===\"shotBoundaries\"){\r\n            e.target.checked? this.setState({shotBoundaries:\"display-visible\"}):this.setState({shotBoundaries:\"display-hidden\"});\r\n        }\r\n    };\r\n    onPlayTimeChange = (e) => {\r\n        console.log(\"the time is: \");\r\n        console.log(e.target.currentTime);\r\n        this.setState({coveredTime:(e.target.currentTime/e.target.duration)*100});\r\n        if(this.state.data.face_detection){\r\n            console.log(Object.keys(this.state.data.face_detection).length);\r\n            var frameIdx = parseInt(e.target.currentTime*this.state.data.fps);\r\n            console.log(frameIdx);\r\n            this.setState({frameIdx:frameIdx});\r\n        }\r\n    };\r\n    setFaceDetectionAreas(data){\r\n        var faceAreaArr=[];\r\n        var data = data;\r\n        var fps_half = parseInt(data.fps/1);\r\n        for (var i = 0; i < Object.keys(data.face_detection).length;) {\r\n            var currentObj = {frameNum:String(parseInt(i/data.fps))};\r\n            for (var j= 0; j < data.max_n_faces;j++) {\r\n                currentObj[\"f\"+String(j+1)] = 0;\r\n            }\r\n            for (var j= 0; j < data.face_detection[i].length;j++) {\r\n                currentObj[\"f\"+String(j+1)] = data.face_detection[i][j].bbox_area;\r\n            }\r\n            faceAreaArr.push(currentObj);\r\n            i = i+fps_half\r\n        }\r\n        console.log(\"computed faceAreaArr: \")\r\n        console.log(faceAreaArr)\r\n        return faceAreaArr;\r\n    };\r\n    getFaceDetectionAreas= () =>{\r\n     return this.state.faceAreaArr;\r\n    };\r\n    getVideoFrameRatio=()=>{\r\n        return this.videoFrameRatio;\r\n    };\r\n    computeFaceBboxeArray= () =>{\r\n        var data = this.state.data;\r\n        var faceBboxesArr=[];\r\n        var halFpsJump = parseInt(data.fps/2);\r\n        if(data.face_detection){\r\n            if(Object.keys(data.face_detection).length > 0){\r\n             for (var i= 0; i< Object.keys(data.face_detection).length;i++) {\r\n                var bboxArr = [];\r\n                 for (var j= 0; j< data.face_detection[i].length;j++) {\r\n                        bboxArr.push(data.face_detection[i][j].bbox_xywh);\r\n                    }\r\n                faceBboxesArr.push(bboxArr);\r\n            }\r\n        }\r\n        return faceBboxesArr;\r\n        }\r\n        return faceBboxesArr;\r\n    };\r\n    getCurrentFaceBboxesArray= () =>{\r\n        return this.state.currentBoxValues[this.state.frameIdx];\r\n    };\r\n    getCurrentVideoSource= () =>{\r\n        return this.videoDict[this.state.vidId]\r\n    };\r\n    getCurrentShotArray= () =>{\r\n        return this.state.sceneData;\r\n    };\r\n    getShotDetectionResults = (e) => {\r\n         e.preventDefault();\r\n         const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                \"title\": e.target.name,\r\n                \"path\": \"media/\"+e.target.name\r\n            })\r\n        };\r\n        fetch(\"http://localhost:5000/detect_shots/\"+e.target.id,requestOptions)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            console.log(\"shot data: \")\r\n            console.log(data)\r\n            this.setState({sceneData:data})\r\n        })\r\n        .catch(error => this.setState({ error}));\r\n     };\r\n\r\n    getFaceDetectionResults = (e) => {\r\n         e.preventDefault();\r\n         const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                \"title\": e.target.name,\r\n                \"path\": \"media/\"+e.target.name\r\n            })\r\n        };\r\n        fetch(\"http://localhost:5000/detect_faces/\"+e.target.id,requestOptions)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            this.setState({data:data,vidId:e.target.id})\r\n            console.log(\"set vidId: \")\r\n            console.log(this.videoDict[this.state.vidId])\r\n            this.videoFrameRatio = [this.baseFrameWidthHeight[0]/this.videoShape[this.state.vidId][0], this.baseFrameWidthHeight[1]/this.videoShape[this.state.vidId][1]];\r\n            //console.log(this.video_player.current.baseURI+this.videoDict[this.state.vidId])\r\n            //this.video_player.current.currentSrc = this.video_player.current.baseURI+this.videoDict[this.state.vidId]\r\n            this.setState({currentBoxValues:this.computeFaceBboxeArray(data),faceAreaArr:this.setFaceDetectionAreas(data)})\r\n            console.log(\"DataLoaded Now Inner: \")\r\n            console.log(this.state.data)\r\n            this.getShotDetectionResults(e)\r\n            this.setCheckboxDefault()\r\n        })\r\n        .catch(error => this.setState({ error}));\r\n     };\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n        <div>\r\n            <table border='0px' width=\"100%\">\r\n            <tbody>\r\n                <tr>\r\n                    <th width=\"30%\" className=\"text-align-left\">\r\n                        <div class=\"tabset\">\r\n                          <input type=\"radio\" name=\"tabset\" id=\"tab1\" aria-controls=\"sec1\" checked />\r\n                          <label for=\"tab1\">Current</label>\r\n                          <input type=\"radio\" name=\"tabset\" id=\"tab2\" aria-controls=\"sec2\" />\r\n                          <label for=\"tab2\">Other</label>\r\n                          <div class=\"tab-panels\">\r\n                            <section id=\"sec1\" class=\"tab-panel\">\r\n                              <h2>Example Videos</h2>\r\n                                <ol>\r\n                                  <li><a id=\"1\" className=\"video-links\" href=\"\" name={this.videoNames[1]} onClick={this.getFaceDetectionResults}>Crash Course Engineering Preview English</a></li>\r\n                                  <li><a id=\"2\" className=\"video-links\" href=\"\" name={this.videoNames[2]} onClick={this.getFaceDetectionResults}>Electronic Computing Crash Course Computer Science 2 English csyt</a></li>\r\n                                </ol>\r\n                              </section>\r\n                              <section id=\"sec2\" class=\"tab-panel\">\r\n                                  <h2>content-2</h2>\r\n                                  <p>Other content will be places here when needed</p>\r\n                              </section>\r\n                          </div>\r\n                        </div>\r\n                    </th>\r\n                    <th width=\"50%\"><div id=\"media_player_div\"><video id=\"media_player\" ref={this.video_player} width=\"100%\" height=\"300\" onTimeUpdate={this.onPlayTimeChange} src={this.videoDict[this.state.vidId]} controls></video></div></th>\r\n                    <th width=\"20%\" className=\"text-align-left\">\r\n                        <h2>Annotations</h2>\r\n                            <div className=\"bg-cb-bl bg-rad-3 pd-cb mrg-cb\"><input ref={this.cbFaceDetectors}  type=\"checkbox\" name=\"cbFaceDetectors\" value=\"faceDetectors\" onChange={this.onCheckboxChange}/>Face Detectors<br/></div>\r\n                            <div className=\"bg-cb-gr bg-rad-3 pd-cb mrg-cb\"><input ref={this.cbFaceAreaGraph} type=\"checkbox\" name=\"cbFaceAreaGraph\" value=\"faceAreaGraph\" onChange={this.onCheckboxChange}/>Face Area Graph<br/></div>\r\n                            <div className=\"bg-cb-yl bg-rad-3 pd-cb mrg-cb\"><input ref={this.cbShotBoundaries} type=\"checkbox\" name=\"cbShotBoundaries\" value=\"shotBoundaries\" onChange={this.onCheckboxChange}/>Shot Boundaries<br/></div>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th width=\"25%\"><AnnotationForm disable={false} submit={true} getCurrentFaceBboxesArray={this.getCurrentFaceBboxesArray}/></th>\r\n                    <th width=\"50%\">\r\n                        <div className={this.state.shotBoundaries}><ShotBoundaryViewer video_player={this.video_player} getFrameRate={this.getFrameRate} getCurrentShotArray={this.getCurrentShotArray} getFrameIdx={this.getFrameIdx} /></div>\r\n                        <input ref={this.valSlider} type=\"range\" min=\"0\" max={this.state.coveredTimeStartShift+100} value={this.state.coveredTimeStartShift+this.state.coveredTime} className=\"slider\" />\r\n                        <div className={this.state.faceAreaGraph}><FaceAnalysisGraph faceAreaArrForGraph={this.state.faceAreaArr}/></div>\r\n                    </th>\r\n                    <th width=\"25%\"></th>\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n        <div className={this.state.faceDetectors}>\r\n            <Rectangle width={80} height={80} top={300} left={500} getFrameRate={this.getFrameRate} video_player={this.video_player} getCurrentFaceBboxesArray={this.getCurrentFaceBboxesArray} getFrameIdx={this.getFrameIdx} getVideoFrameRatio={this.getVideoFrameRatio}/>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnalysisViewer;","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\rectangle.jsx",["96"],"import React, { Component } from \"react\";\r\nimport ResizableRect from 'react-resizable-rotatable-draggable'\r\n\r\nclass Rectangle extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          getCurrentFaceBboxesArray: props.getCurrentFaceBboxesArray,\r\n          getFrameIdx: props.getFrameIdx,\r\n          getVideoFrameRatio: props.getVideoFrameRatio,\r\n          xShift:window.innerWidth-866, //375 550 430 230 window.innerWidth*0.3879  550\r\n          yShift:220, //-200 100 220 220 window.innerHeight*0.2270 220 (-1*window.innerHeight)+1189\r\n          xScale:0.8, //375 550 1.0\r\n          yScale:0.8, //-200 100 1.0 //+(1.0-props.getVideoFrameRatio()[1]-0.25)\r\n          xMulti:0.9, //375 0.7 1.0 props.getVideoFrameRatio()[0]\r\n          yMulti:0.9, //-200 0.7 1.0 props.getVideoFrameRatio()[1]\r\n          windowHeight:window.innerHeight,\r\n          windowWidth:window.innerWidth\r\n        };\r\n      }\r\n    errorHandler = ({ error }) => this.setState({ error });\r\n    onChangeCallback = (selectedInterval) => this.setState({ selectedInterval });\r\n    getDisableEnableFlag = () => {\r\n        console.log(\"height: \"+window.innerHeight);\r\n        console.log(\"width: \"+window.innerWidth);\r\n        this.setState({xShift:window.innerWidth-866});\r\n        //this.setState({yShift:(-1*window.innerHeight)+1189});\r\n    };\r\n    render() {\r\n        window.addEventListener('resize', this.getDisableEnableFlag);\r\n        const ResizableRectList = [];\r\n        if(this.state.getCurrentFaceBboxesArray()){\r\n            console.log(this.state.getCurrentFaceBboxesArray().length);\r\n            console.log(this.state.getFrameIdx());\r\n            var frmIdx = this.state.getFrameIdx();\r\n            var currentBboxxywh = this.state.getCurrentFaceBboxesArray();\r\n            for (var i = 0; i < currentBboxxywh.length; i++) {\r\n                ResizableRectList.push(<ResizableRect\r\n                          top={this.state.yMulti*this.state.getVideoFrameRatio()[1]*(this.state.yShift+currentBboxxywh[i][1])}\r\n                          left={this.state.xMulti*this.state.getVideoFrameRatio()[0]*(this.state.xShift+currentBboxxywh[i][0])}\r\n                          width={currentBboxxywh[i][2]*this.state.xScale}\r\n                          height={currentBboxxywh[i][3]*this.state.yScale}\r\n                          zoomable='n, w, s, e, nw, ne, se, sw' />)\r\n              };\r\n\r\n        }\r\n        return (\r\n            <div>\r\n                {ResizableRectList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rectangle;","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\faceAnalysisGraph.jsx",["97","98","99","100","101","102"],"import FileSaver from \"file-saver\";\r\nimport React from \"react\";\r\nimport { useMeasure } from \"react-use\";\r\nimport {\r\n  CartesianGrid,\r\n  Legend,\r\n  Line,\r\n  LineChart,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from \"recharts\";\r\nimport { getPngData } from \"recharts-to-png\";\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nexport const FaceAnalysisGraph = (args) => {\r\n\r\n  const [containerRef, { width: containerWidth }] = useMeasure();\r\n  // The chart that we want to download the PNG for.\r\n  const [chart, setChart] = React.useState();\r\n\r\n  const handleDownloadPNG = React.useCallback(async () => {\r\n    // Send the chart to getPngData\r\n    const pngData = await getPngData(chart);\r\n    // Use FileSaver to download the PNG\r\n    FileSaver.saveAs(pngData, \"videofaceanalysis.png\");\r\n  }, [chart]);\r\n   const handleDownloadCSV = React.useCallback(async () => {\r\n    console.log(\"chart object: \")\r\n    console.log(chart)\r\n    // Send the chart to getPngData\r\n    const pngData = await getPngData(chart);\r\n    // Use FileSaver to download the PNG\r\n    FileSaver.saveAs(pngData, \"videofaceanalysis.png\");\r\n  }, [chart]);\r\n\r\n  const colorschemes = [\"#C49500\",\"#060606\",\"#0F7800\",\"#AF1F00\",\"#7B7878\",\"#C49500\",\"#588A00\",\"#0F7800\",\"#007245\",\"#008F91\",\"#004091\",\"#040091\",\"#420091\",\"#7F0091\",\"#91004B\",\"#910025\",\"#317A9A\"];\r\n\r\n  var data = args.faceAreaArrForGraph;\r\n  function getRandomColor() {\r\n      var letters = '0123456789ABCDEF';\r\n      var color = '#';\r\n      for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n    return color;\r\n    }\r\n    function getMultiLineForGraph(data) {\r\n        var multiLineForGraph = '';\r\n        var allKeys = Object.keys(data[0]);\r\n        for (var i = 1; i < allKeys.length; i++) {\r\n        multiLineForGraph = multiLineForGraph+'<Line type=\"monotone\" dataKey=\"'+allKeys[i]+'\" stroke=\"'+colorschemes[i]+'\"/> '\r\n        }\r\n    };\r\n\r\n  var multiLineForGraph = [];\r\n        var allKeys = Object.keys(data[0]);\r\n        for (var i = 1; i < allKeys.length; i++) {\r\n            multiLineForGraph.push(<Line type=\"monotone\" dataKey={allKeys[i]} stroke={colorschemes[i]} />);\r\n        }\r\n  return (\r\n        <>\r\n          <LineChart\r\n            ref={(ref) => setChart(ref)} // Set target element\r\n            data={data}\r\n            height={300}\r\n            width={700}\r\n          >\r\n            <XAxis dataKey=\"frameNum\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Legend wrapperStyle={{ bottom: -5 }} />\r\n            {multiLineForGraph}\r\n          </LineChart>\r\n          <span style={{ float: 'left' }}>\r\n            <button className=\"btn-stl bg-cb-bl\" onClick={handleDownloadPNG}>Download as PNG</button>\r\n          </span>\r\n          <span style={{ float: 'right' }}>\r\n          <CSVLink  className=\"btn-stl bg-cb-bl\" data={data} filename={\"face-detections.csv\"}>Download CSV</CSVLink> </span>\r\n        </>\r\n  );\r\n};\r\n\r\nexport default FaceAnalysisGraph;\r\n","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\header.jsx",["103"],"import React, { Component } from \"react\";\r\nimport tibavaLogo from './../../media/tib_tibava_logo_opq.png';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n      }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <table border='0px' width=\"100%\">\r\n                    <tbody>\r\n                        <tr>\r\n                        <th width=\"20%\" className=\"text-align-center\"><img className=\"tibava-logo\" src={tibavaLogo} alt=\"TIB-AV-A\" /></th>\r\n                        <th width=\"65%\" className=\"text-align-center\"><h2>Audio Video Analysis</h2>\r\n                            <form class=\"search\" action=\"\">\r\n                              <input type=\"text\" placeholder=\"Search for publicly available analysis\" name=\"search\" />\r\n                              <button type=\"submit\"><i class=\"fa fa-search\"></i> Search</button>\r\n                            </form>\r\n                        </th>\r\n                        <th width=\"15%\" className=\"text-align-left\"></th>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\shotBoundaryViewer.jsx",[],"C:\\working directory\\git_dev\\git_org_tibava\\dev\\frontend\\src\\components\\annotationForm.jsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":12},{"ruleId":"108","severity":1,"message":"112","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":72,"column":13,"nodeType":"110","messageId":"115","endLine":72,"endColumn":17},{"ruleId":"113","severity":1,"message":"116","line":79,"column":22,"nodeType":"110","messageId":"115","endLine":79,"endColumn":23},{"ruleId":"108","severity":1,"message":"117","line":95,"column":13,"nodeType":"110","messageId":"111","endLine":95,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":154,"column":39,"nodeType":"120","endLine":154,"endColumn":122},{"ruleId":"118","severity":1,"message":"119","line":155,"column":39,"nodeType":"120","endLine":155,"endColumn":122},{"ruleId":"108","severity":1,"message":"121","line":20,"column":13,"nodeType":"110","messageId":"111","endLine":20,"endColumn":19},{"ruleId":"108","severity":1,"message":"122","line":17,"column":10,"nodeType":"110","messageId":"111","endLine":17,"endColumn":22},{"ruleId":"108","severity":1,"message":"123","line":17,"column":33,"nodeType":"110","messageId":"111","endLine":17,"endColumn":47},{"ruleId":"108","severity":1,"message":"124","line":30,"column":12,"nodeType":"110","messageId":"111","endLine":30,"endColumn":26},{"ruleId":"108","severity":1,"message":"125","line":38,"column":14,"nodeType":"110","messageId":"111","endLine":38,"endColumn":34},{"ruleId":"104","replacedBy":"126"},{"ruleId":"106","replacedBy":"127"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":12},{"ruleId":"108","severity":1,"message":"112","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":109,"column":13,"nodeType":"110","messageId":"115","endLine":109,"endColumn":17},{"ruleId":"113","severity":1,"message":"116","line":116,"column":22,"nodeType":"110","messageId":"115","endLine":116,"endColumn":23},{"ruleId":"108","severity":1,"message":"117","line":135,"column":13,"nodeType":"110","messageId":"111","endLine":135,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":224,"column":39,"nodeType":"120","endLine":224,"endColumn":146},{"ruleId":"118","severity":1,"message":"119","line":225,"column":39,"nodeType":"120","endLine":225,"endColumn":146},{"ruleId":"108","severity":1,"message":"121","line":35,"column":17,"nodeType":"110","messageId":"111","endLine":35,"endColumn":23},{"ruleId":"108","severity":1,"message":"128","line":14,"column":19,"nodeType":"110","messageId":"111","endLine":14,"endColumn":30},{"ruleId":"108","severity":1,"message":"122","line":17,"column":10,"nodeType":"110","messageId":"111","endLine":17,"endColumn":22},{"ruleId":"108","severity":1,"message":"123","line":17,"column":33,"nodeType":"110","messageId":"111","endLine":17,"endColumn":47},{"ruleId":"108","severity":1,"message":"129","line":27,"column":10,"nodeType":"110","messageId":"111","endLine":27,"endColumn":27},{"ruleId":"108","severity":1,"message":"124","line":39,"column":12,"nodeType":"110","messageId":"111","endLine":39,"endColumn":26},{"ruleId":"108","severity":1,"message":"125","line":47,"column":14,"nodeType":"110","messageId":"111","endLine":47,"endColumn":34},{"ruleId":"130","severity":1,"message":"131","line":5,"column":5,"nodeType":"132","messageId":"133","endLine":7,"endColumn":8},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'RangeSlider' is defined but never used.","no-redeclare","'data' is already defined.","redeclared","'j' is already defined.","'halFpsJump' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'frmIdx' is assigned a value but never used.","'containerRef' is assigned a value but never used.","'containerWidth' is assigned a value but never used.","'getRandomColor' is defined but never used.","'getMultiLineForGraph' is defined but never used.",["134"],["135"],"'CSVDownload' is defined but never used.","'handleDownloadCSV' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]